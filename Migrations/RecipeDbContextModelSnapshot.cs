// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Recipes.Database;

#nullable disable

namespace Recipes.Migrations
{
    [DbContext(typeof(RecipeDbContext))]
    partial class RecipeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Recipes.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Start your day with energy",
                            Name = "Breakfast",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Refuel your body with a healthy lunch",
                            Name = "Lunch",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "End your day with a delicious dinner",
                            Name = "Dinner",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Quick and easy snacks for any time",
                            Name = "Snack",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Recipes.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CookingTimeHours")
                        .HasColumnType("integer");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FavoritesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<string[]>("Instructions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CookingTimeHours = 0,
                            CookingTimeMinutes = 20,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStatus = 3,
                            Description = "Fluffy pancakes perfect for breakfast.",
                            FavoritesCount = 0,
                            Image = "",
                            Ingredients = new[] { "2 cups flour", "2 eggs", "1.5 cups milk", "2 tbsp sugar", "1 tsp baking powder", "Pinch of salt" },
                            Instructions = new[] { "Mix dry ingredients.", "Add eggs and milk.", "Whisk until smooth.", "Cook on griddle until golden." },
                            Name = "Classic Pancakes",
                            Tags = new[] { "breakfast", "pancakes" },
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CookingTimeHours = 0,
                            CookingTimeMinutes = 25,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStatus = 3,
                            Description = "A healthy lunch salad with grilled chicken.",
                            FavoritesCount = 0,
                            Image = "",
                            Ingredients = new[] { "2 chicken breasts", "Romaine lettuce", "Caesar dressing", "Croutons", "Parmesan cheese" },
                            Instructions = new[] { "Grill chicken.", "Chop lettuce.", "Mix all ingredients.", "Top with dressing and cheese." },
                            Name = "Chicken Caesar Salad",
                            Tags = new[] { "lunch", "salad" },
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CookingTimeHours = 0,
                            CookingTimeMinutes = 40,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStatus = 3,
                            Description = "Classic Italian pasta dish with rich meat sauce.",
                            FavoritesCount = 0,
                            Image = "",
                            Ingredients = new[] { "200g spaghetti", "100g ground beef", "1 can tomato sauce", "1 onion", "2 cloves garlic", "Olive oil", "Salt", "Pepper" },
                            Instructions = new[] { "Cook spaghetti.", "Sauté onion and garlic.", "Add beef and cook until brown.", "Pour in tomato sauce and simmer.", "Serve sauce over spaghetti." },
                            Name = "Spaghetti Bolognese",
                            Tags = new[] { "dinner", "pasta" },
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CookingTimeHours = 0,
                            CookingTimeMinutes = 30,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStatus = 3,
                            Description = "Chewy cookies loaded with chocolate chips.",
                            FavoritesCount = 0,
                            Image = "",
                            Ingredients = new[] { "1 cup butter", "1 cup sugar", "2 cups flour", "2 eggs", "1 tsp vanilla", "1 tsp baking soda", "2 cups chocolate chips" },
                            Instructions = new[] { "Preheat oven to 350°F (175°C).", "Cream butter and sugar.", "Add eggs and vanilla.", "Mix in flour and baking soda.", "Fold in chocolate chips.", "Drop by spoonfuls onto baking sheet.", "Bake for 10-12 minutes." },
                            Name = "Chocolate Chip Cookies",
                            Tags = new[] { "snack", "cookies" },
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CookingTimeHours = 0,
                            CookingTimeMinutes = 15,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStatus = 3,
                            Description = "Fresh salad with tomatoes, mozzarella, and basil.",
                            FavoritesCount = 0,
                            Image = "",
                            Ingredients = new[] { "4 tomatoes", "200g mozzarella", "Fresh basil", "Olive oil", "Salt", "Pepper" },
                            Instructions = new[] { "Slice tomatoes and mozzarella.", "Layer with basil leaves.", "Drizzle with olive oil.", "Season with salt and pepper." },
                            Name = "Caprese Salad",
                            Tags = new[] { "lunch", "salad" },
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CookingTimeHours = 0,
                            CookingTimeMinutes = 20,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStatus = 3,
                            Description = "Quick and healthy vegetable stir-fry.",
                            FavoritesCount = 0,
                            Image = "",
                            Ingredients = new[] { "Mixed vegetables (bell peppers, broccoli, carrots)", "2 tbsp soy sauce", "1 tbsp olive oil", "2 cloves garlic", "1 tsp ginger" },
                            Instructions = new[] { "Heat oil in a pan.", "Add garlic and ginger, sauté for 1 minute.", "Add vegetables and stir-fry until tender.", "Add soy sauce and cook for another 2 minutes." },
                            Name = "Vegetable Stir-Fry",
                            Tags = new[] { "dinner", "vegetarian" },
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Recipes.Models.RecipeFavorite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeFavorites", (string)null);
                });

            modelBuilder.Entity("Recipes.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanSubmitRecipes")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("Roles")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanSubmitRecipes = true,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "testuser",
                            Email = "testuser@test.com",
                            FirstName = "Seed",
                            LastName = "User",
                            PasswordHash = "$2a$12$5TWK64v6F6PcHnH9d3b1QegvN3M218yWqbxwFJnROB6J7DenFONsC",
                            Roles = new[] { 1, 0 },
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Recipes.Models.Recipe", b =>
                {
                    b.HasOne("Recipes.Models.Category", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipes.Models.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Models.RecipeFavorite", b =>
                {
                    b.HasOne("Recipes.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipes.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Models.Category", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Recipes.Models.User", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
